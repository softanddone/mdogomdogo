---
import ProductCard from "./ProductCard.astro";
import { products } from "../data/products.js";
import Latest from "./Latest.astro";

// Extract unique categories from all categoryPaths
const allCategories = products.flatMap((product) => product.categoryPath || []);
const uniqueCategories = [...new Set(allCategories)];

// Category icons mapping with SVG strings
const categoryIcons: { [key: string]: string } = {
  Electronics: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  "Mobile Phones": `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"/></svg>`,
  Smartphones: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Samsung: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Mkopa: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>`,
  "Watu Simu": `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>`,
  Apple: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z"/><path d="M10 2c1 .5 2 2 2 5"/></svg>`,
  Huawei: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Oppo: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Tecno: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Infinix: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Xiaomi: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="14" height="20" x="5" y="2" rx="2" ry="2"/><path d="M12 18h.01"/></svg>`,
  Accessories: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2v20"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>`,
  Cases: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"/></svg>`,
  Chargers: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="10" x="2" y="7" rx="2" ry="2"/><line x1="13" x2="13" y1="1" y2="6"/><line x1="18" x2="18" y1="1" y2="6"/></svg>`,
  Headphones: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 18v-6a9 9 0 0 1 18 0v6"/><path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"/></svg>`,
  Tablets: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><line x1="12" x2="12.01" y1="18" y2="18"/></svg>`,
  Laptops: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16"/></svg>`,
  Computing: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="20" height="14" x="2" y="3" rx="2"/><line x1="8" x2="16" y1="21" y2="21"/><line x1="12" x2="12" y1="17" y2="21"/></svg>`,
  Gaming: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="6" x2="10" y1="12" y2="12"/><line x1="8" x2="8" y1="10" y2="14"/><line x1="15" x2="15.01" y1="13" y2="13"/><line x1="18" x2="18.01" y1="11" y2="11"/><rect width="20" height="12" x="2" y="6" rx="2"/></svg>`,
  Audio: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5,6 9,2 9,2 15,6 15,11 19,11 5"/><path d="M15.54 8.46a5 5 0 0 1 0 7.07"/><path d="M19.07 4.93a10 10 0 0 1 0 14.14"/></svg>`,
  Cameras: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/><circle cx="12" cy="13" r="3"/></svg>`,
  "Smart Home": `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>`,
  Wearables: `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="6"/><polyline points="12,10 12,12 13,13"/><path d="M16.13 7.66L18.36 4.94a2 2 0 0 1 2.83.28 2 2 0 0 1-.28 2.83l-2.72 2.22"/><path d="M7.87 16.34L5.64 19.06a2 2 0 0 1-2.83-.28 2 2 0 0 1 .28-2.83l2.72-2.22"/></svg>`,
};

// Helper function to safely get category icon
const getCategoryIcon = (category: string): string => {
  return (
    categoryIcons[category] ||
    `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27,6.96 12,12.01 20.73,6.96"/><line x1="12" y1="22.08" x2="12" y2="12"/></svg>`
  );
};
---

<style is:inline>
  :root {
    --dark-color: #161616;
    --smaller-font-size: 0.75rem;
    --accent-color: #ff5151;
  }

  body {
    margin: 2rem 0 0 0;
    background-color: #fff;
    color: var(--dark-color);
    width: 100vw;
    overflow-x: hidden;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  .main {
    padding: 2rem 0;
    margin-top: 40px;
  }

  /* Category carousel specific styles */
  .category-carousel-container {
    max-width: 1200px;
    margin: 0 2.5rem 3rem 2.5rem;
    overflow: hidden;
    position: relative;
    user-select: none;
  }

  .category-carousel-container h2 {
    margin-left: 40px;
    margin-bottom: 20px;
    font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS",
      sans-serif;
  }
  .carousel-container h1 {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif;
    margin-top: 50px;
    margin-bottom: 30px;
  }

  .category-carousel-track {
    display: flex;
    gap: 1.5rem;
    transition: transform 0.5s ease-in-out;
    will-change: transform;
  }

  .category-carousel-track.no-transition {
    transition: none;
  }

  .category-item {
    flex: 0 0 auto;
    cursor: grab;
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 1rem;
    min-height: 80px;
  }

  .category-item:active {
    cursor: grabbing;
  }

  .category-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-color: var(--accent-color);
  }

  .category-icon {
    font-size: 2.5rem;
    flex-shrink: 0;
  }

  .category-name {
    font-size: 1rem;
    font-weight: 600;
    color: var(--dark-color);
    margin: 0;
    white-space: nowrap;
    flex: 1;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif;
  }

  /* Category carousel responsive widths */
  .category-item {
    width: calc(
      (1200px - 6rem) / 5
    ); /* 5 categories: max-width - gaps (4 gaps * 1.5rem) */
    min-width: calc((1200px - 6rem) / 5);
  }

  @media (max-width: 1024px) {
    .category-item {
      width: calc(
        (100vw - 5rem - 4.5rem) / 4
      ); /* 4 categories: viewport - container margins - gaps */
      min-width: calc((100vw - 5rem - 4.5rem) / 4);
    }

    .category-carousel-track {
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .category-carousel-track {
      gap: 1rem;
    }
    .category-carousel-container h2 {
      /* background: red !important; */
      margin-left: 25px;
      margin-bottom: 40px;
    }

    .category-item {
      width: calc((100vw - 2rem - 2rem) / 3); /* 3 categories */
      min-width: calc((100vw - 2rem - 2rem) / 3);
      padding: 1rem;
      gap: 0.75rem;
      min-height: 70px;
    }

    .category-carousel-container {
      margin: 0 1rem 3rem 1rem;
    }

    .category-icon {
      font-size: 2rem;
    }

    .category-name {
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    .category-carousel-track {
      gap: 0.75rem;
    }

    .category-item {
      width: calc((100vw - 2rem - 0.75rem) / 2); /* 2 categories for mobile */
      min-width: calc((100vw - 2rem - 0.75rem) / 2);
      padding: 0.75rem;
      gap: 0.5rem;
      min-height: 60px;
    }

    .category-icon {
      font-size: 1.75rem;
    }

    .category-name {
      font-size: 0.85rem;
    }
  }

  @media (max-width: 320px) {
    .category-carousel-track {
      gap: 0.5rem;
    }

    .category-item {
      width: calc(
        (100vw - 2rem - 0.5rem) / 2
      ); /* Keep 2 categories even on very small screens */
      min-width: calc((100vw - 2rem - 0.5rem) / 2);
      padding: 0.5rem;
      gap: 0.5rem;
      min-height: 50px;
    }

    .category-icon {
      font-size: 1.5rem;
    }

    .category-name {
      font-size: 0.75rem;
    }
  }

  /* Product carousel styles */
  /* Product carousel styles */
  .carousel-container {
    max-width: 1200px;
    margin: 0 2.5rem;
    overflow: hidden;
    position: relative;
    user-select: none;
  }

  .carousel-track {
    display: flex;
    gap: 2rem;
    transition: transform 0.5s ease-in-out;
    will-change: transform;
  }

  .carousel-track.no-transition {
    transition: none;
  }

  .carousel-item {
    flex: 0 0 auto;
    cursor: grab;
  }

  .carousel-item:active {
    cursor: grabbing;
  }

  /* Responsive product display - calculated widths for perfect fit */
  .carousel-item {
    width: calc((1200px - 8rem) / 5); /* 5 cards: max-width - gaps */
    min-width: calc((1200px - 8rem) / 5);
  }

  @media (max-width: 1024px) {
    .carousel-item {
      width: calc(
        (100vw - 5rem - 6rem) / 4
      ); /* 4 cards: viewport - container margins - gaps */
      min-width: calc((100vw - 5rem - 6rem) / 4);
    }
  }

  @media (max-width: 768px) {
    .carousel-track {
      gap: 1rem; /* Reduced gap for small tablets */
    }

    .carousel-item {
      width: calc(
        (100vw - 2rem - 2rem) / 3
      ); /* 3 cards: viewport - container margins - gaps */
      min-width: calc((100vw - 2rem - 2rem) / 3);
    }

    .carousel-container {
      margin: 0 1rem;
    }
  }

  @media (max-width: 480px) {
    .carousel-track {
      gap: 0.75rem; /* Even smaller gap for mobile */
    }

    .carousel-item {
      width: calc(
        (100vw - 2rem - 0.75rem) / 2
      ); /* 2 cards: viewport - container margins - gap */
      min-width: calc((100vw - 2rem - 0.75rem) / 2);
    }
  }

  @media (max-width: 320px) {
    .carousel-track {
      gap: 0.5rem; /* Minimal gap for very small screens */
    }

    .carousel-item {
      width: calc(
        100vw - 2rem
      ); /* 1 card: full viewport minus container margins */
      min-width: calc(100vw - 2rem);
    }
  }

  .whatsapp {
    width: 100px;
    height: 50px;
    position: fixed;
    bottom: 20px;
    right: 10px;
    padding: 12px 15px;
    border-radius: 20px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    z-index: 999;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
  }

  .message {
    display: flex;
    width: 60px;
  }

  .message h1 {
    font-size: 10px;
    margin: auto;
  }

  footer {
    text-align: center;
    margin-top: 3rem;
    padding: 2rem;
    color: var(--dark-color);
    opacity: 0.7;
  }

  footer a {
    color: var(--dark-color);
    transition: color 0.3s ease;
  }

  footer a:hover {
    color: var(--accent-color);
  }

  @media screen and (min-width: 1200px) {
    body {
      margin: 3rem 0 0 0;
    }
    .carousel-container {
      margin-left: auto;
      margin-right: auto;
    }
  }
</style>

<main class="main">
  <!-- Category Carousel -->
  <div class="category-carousel-container">
    <h2>Shop by Category</h2>

    <div class="category-carousel-track" id="category-carousel-track">
      {/* Original categories */}
      {
        uniqueCategories.map((category, index) => (
          <div class="category-item" data-index={index}>
            <span class="category-icon" set:html={getCategoryIcon(category)} />
            <h3 class="category-name">{category}</h3>
          </div>
        ))
      }
      {/* Cloned categories for infinite effect */}
      {
        uniqueCategories.map((category, index) => (
          <div
            class="category-item"
            data-index={index + uniqueCategories.length}
          >
            <span class="category-icon" set:html={getCategoryIcon(category)} />
            <h3 class="category-name">{category}</h3>
          </div>
        ))
      }
    </div>
  </div>

  <Latest />

  <!-- Product Carousel -->
  <div class="carousel-container">
    <h1>Trending Phones on Lipa Mdogo Mdogo in Kenya</h1>

    <div class="carousel-track" id="carousel-track">
      {/* Original products */}
      {
        products.map((product, index) => (
          <div class="carousel-item" data-index={index}>
            <ProductCard {...product} index={index} />
          </div>
        ))
      }
      {/* Cloned products for infinite effect */}
      {
        products.map((product, index) => (
          <div class="carousel-item" data-index={index + products.length}>
            <ProductCard {...product} index={index} />
          </div>
        ))
      }
    </div>
  </div>

  <div class="whatsapp">
    <a
      href="https://wa.me/254762790513?text=Hello%2C%20I'm%20interested%20in%20your%20products"
      target="_blank"
      rel="noopener noreferrer"
      style="background-color: #25D366; color: white; padding: 8px 12px; border-radius: 50%; box-shadow: 0 2px 6px rgba(0,0,0,0.2); font-size: 24px; z-index: 999;"
      aria-label="Chat with us on WhatsApp"
    >
    </a>

    <div class="message">
      <h1>Chat</h1>
    </div>
  </div>
</main>

<script
  define:vars={{
    totalProducts: products.length,
    totalCategories: uniqueCategories.length,
  }}
>
  document.addEventListener("DOMContentLoaded", function () {
    // Category Carousel Logic
    const categoryTrack = document.getElementById("category-carousel-track");

    if (categoryTrack) {
      let categoryCurrentIndex = 0;
      let categoryAutoPlayInterval;
      let categoryIsTransitioning = false;
      let categoryIsDragging = false;
      let categoryStartX = 0;
      let categoryCurrentX = 0;
      let categoryInitialTransform = 0;

      function getCategoryItemWidth() {
        const firstItem = categoryTrack.children[0];
        if (!firstItem) return 150; // fallback

        const width = window.innerWidth;
        let gap = 24; // default 1.5rem gap

        if (width <= 320) {
          gap = 8; // 0.5rem
        } else if (width <= 480) {
          gap = 12; // 0.75rem
        } else if (width <= 768) {
          gap = 16; // 1rem
        }

        return firstItem.offsetWidth + gap;
      }

      function updateCategoryTransform(index, immediate = false) {
        const itemWidth = getCategoryItemWidth();
        const translateX = -index * itemWidth;

        if (immediate) {
          categoryTrack.classList.add("no-transition");
          categoryTrack.style.transform = `translateX(${translateX}px)`;
          categoryTrack.offsetHeight;
          categoryTrack.classList.remove("no-transition");
        } else {
          categoryTrack.style.transform = `translateX(${translateX}px)`;
        }
      }

      function moveCategoryToNext() {
        if (categoryIsTransitioning) return;

        categoryIsTransitioning = true;
        categoryCurrentIndex++;
        updateCategoryTransform(categoryCurrentIndex);

        if (categoryCurrentIndex >= totalCategories) {
          setTimeout(() => {
            categoryCurrentIndex = 0;
            updateCategoryTransform(categoryCurrentIndex, true);
            categoryIsTransitioning = false;
          }, 500);
        } else {
          setTimeout(() => {
            categoryIsTransitioning = false;
          }, 500);
        }
      }

      function moveCategoryToPrev() {
        if (categoryIsTransitioning) return;

        categoryIsTransitioning = true;

        if (categoryCurrentIndex <= 0) {
          categoryCurrentIndex = totalCategories;
          updateCategoryTransform(categoryCurrentIndex, true);
          setTimeout(() => {
            categoryCurrentIndex = totalCategories - 1;
            updateCategoryTransform(categoryCurrentIndex);
            setTimeout(() => {
              categoryIsTransitioning = false;
            }, 500);
          }, 50);
        } else {
          categoryCurrentIndex--;
          updateCategoryTransform(categoryCurrentIndex);
          setTimeout(() => {
            categoryIsTransitioning = false;
          }, 500);
        }
      }

      function startCategoryAutoPlay() {
        stopCategoryAutoPlay();
        categoryAutoPlayInterval = setInterval(moveCategoryToNext, 3000);
      }

      function stopCategoryAutoPlay() {
        if (categoryAutoPlayInterval) {
          clearInterval(categoryAutoPlayInterval);
        }
      }

      // Category carousel drag/touch events
      function handleCategoryStart(clientX) {
        categoryIsDragging = true;
        categoryStartX = clientX;
        categoryCurrentX = clientX;
        categoryInitialTransform =
          categoryCurrentIndex * getCategoryItemWidth();
        stopCategoryAutoPlay();
        categoryTrack.classList.add("no-transition");
      }

      function handleCategoryMove(clientX) {
        if (!categoryIsDragging) return;
        categoryCurrentX = clientX;
        const deltaX = categoryCurrentX - categoryStartX;
        const newTransform = -categoryInitialTransform + deltaX;
        categoryTrack.style.transform = `translateX(${newTransform}px)`;
      }

      function handleCategoryEnd() {
        if (!categoryIsDragging) return;
        categoryIsDragging = false;
        categoryTrack.classList.remove("no-transition");

        const deltaX = categoryCurrentX - categoryStartX;
        const threshold = getCategoryItemWidth() / 3;

        if (Math.abs(deltaX) > threshold) {
          if (deltaX > 0) {
            moveCategoryToPrev();
          } else {
            moveCategoryToNext();
          }
        } else {
          updateCategoryTransform(categoryCurrentIndex);
        }

        startCategoryAutoPlay();
      }

      // Category mouse events
      categoryTrack.addEventListener("mousedown", (e) => {
        e.preventDefault();
        handleCategoryStart(e.clientX);
      });

      document.addEventListener("mousemove", (e) => {
        handleCategoryMove(e.clientX);
      });

      document.addEventListener("mouseup", handleCategoryEnd);

      // Category touch events
      categoryTrack.addEventListener(
        "touchstart",
        (e) => {
          handleCategoryStart(e.touches[0].clientX);
        },
        { passive: true }
      );

      categoryTrack.addEventListener(
        "touchmove",
        (e) => {
          handleCategoryMove(e.touches[0].clientX);
        },
        { passive: true }
      );

      categoryTrack.addEventListener("touchend", handleCategoryEnd, {
        passive: true,
      });

      // Category hover events
      categoryTrack.addEventListener("mouseenter", stopCategoryAutoPlay);
      categoryTrack.addEventListener("mouseleave", startCategoryAutoPlay);

      // Initialize category carousel
      updateCategoryTransform(categoryCurrentIndex, true);
      startCategoryAutoPlay();

      // Handle resize for category carousel
      window.addEventListener("resize", () => {
        stopCategoryAutoPlay();
        updateCategoryTransform(categoryCurrentIndex, true);
        setTimeout(startCategoryAutoPlay, 100);
      });
    }

    // Product Carousel Logic (existing code)
    const track = document.getElementById("carousel-track");

    if (!track) return;

    let currentIndex = 0;
    let autoPlayInterval;
    let isTransitioning = false;

    // Touch/drag variables
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    let initialTransform = 0;

    function getProductsPerView() {
      const width = window.innerWidth;
      if (width <= 320) return 1;
      if (width <= 480) return 2;
      if (width <= 768) return 3;
      if (width <= 1024) return 4;
      return 5;
    }

    function getItemWidth() {
      const firstItem = track.children[0];
      if (!firstItem) return 232; // fallback

      const width = window.innerWidth;
      let gap = 32; // default 2rem gap

      // Adjust gap based on screen size to match CSS
      if (width <= 320) {
        gap = 8; // 0.5rem
      } else if (width <= 480) {
        gap = 12; // 0.75rem
      } else if (width <= 768) {
        gap = 16; // 1rem
      }

      return firstItem.offsetWidth + gap;
    }

    function updateTransform(index, immediate = false) {
      const itemWidth = getItemWidth();
      const translateX = -index * itemWidth;

      if (immediate) {
        track.classList.add("no-transition");
        track.style.transform = `translateX(${translateX}px)`;
        // Force reflow
        track.offsetHeight;
        track.classList.remove("no-transition");
      } else {
        track.style.transform = `translateX(${translateX}px)`;
      }
    }

    function moveToNext() {
      if (isTransitioning) return;

      isTransitioning = true;
      currentIndex++;
      updateTransform(currentIndex);

      // Check if we need to reset to create infinite loop
      if (currentIndex >= totalProducts) {
        setTimeout(() => {
          currentIndex = 0;
          updateTransform(currentIndex, true);
          isTransitioning = false;
        }, 500); // Match transition duration
      } else {
        setTimeout(() => {
          isTransitioning = false;
        }, 500);
      }
    }

    function moveToPrev() {
      if (isTransitioning) return;

      isTransitioning = true;

      if (currentIndex <= 0) {
        currentIndex = totalProducts;
        updateTransform(currentIndex, true);
        setTimeout(() => {
          currentIndex = totalProducts - 1;
          updateTransform(currentIndex);
          setTimeout(() => {
            isTransitioning = false;
          }, 500);
        }, 50);
      } else {
        currentIndex--;
        updateTransform(currentIndex);
        setTimeout(() => {
          isTransitioning = false;
        }, 500);
      }
    }

    function startAutoPlay() {
      stopAutoPlay();
      autoPlayInterval = setInterval(moveToNext, 4000);
    }

    function stopAutoPlay() {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
      }
    }

    // Touch and mouse events for swiping/dragging
    function handleStart(clientX) {
      isDragging = true;
      startX = clientX;
      currentX = clientX;
      initialTransform = currentIndex * getItemWidth();
      stopAutoPlay();
      track.classList.add("no-transition");
    }

    function handleMove(clientX) {
      if (!isDragging) return;

      currentX = clientX;
      const deltaX = currentX - startX;
      const newTransform = -initialTransform + deltaX;
      track.style.transform = `translateX(${newTransform}px)`;
    }

    function handleEnd() {
      if (!isDragging) return;

      isDragging = false;
      track.classList.remove("no-transition");

      const deltaX = currentX - startX;
      const threshold = getItemWidth() / 3;

      if (Math.abs(deltaX) > threshold) {
        if (deltaX > 0) {
          moveToPrev();
        } else {
          moveToNext();
        }
      } else {
        updateTransform(currentIndex);
      }

      startAutoPlay();
    }

    // Mouse events
    track.addEventListener("mousedown", (e) => {
      e.preventDefault();
      handleStart(e.clientX);
    });

    document.addEventListener("mousemove", (e) => {
      handleMove(e.clientX);
    });

    document.addEventListener("mouseup", handleEnd);

    // Touch events
    track.addEventListener(
      "touchstart",
      (e) => {
        handleStart(e.touches[0].clientX);
      },
      { passive: true }
    );

    track.addEventListener(
      "touchmove",
      (e) => {
        handleMove(e.touches[0].clientX);
      },
      { passive: true }
    );

    track.addEventListener("touchend", handleEnd, { passive: true });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        e.preventDefault();
        moveToPrev();
      } else if (e.key === "ArrowRight") {
        e.preventDefault();
        moveToNext();
      }
    });

    // Handle window resize
    window.addEventListener("resize", () => {
      stopAutoPlay();
      updateTransform(currentIndex, true);
      setTimeout(startAutoPlay, 100);
    });

    // Pause on hover
    track.addEventListener("mouseenter", stopAutoPlay);
    track.addEventListener("mouseleave", startAutoPlay);

    // Initialize
    updateTransform(currentIndex, true);
    startAutoPlay();
  });
</script>

<footer>
  <a>Copyright @2025. All rights reserved</a>
</footer>
